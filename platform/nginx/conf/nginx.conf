
user	nobody;

## NOTE: worker_processes auto is the best setting, otherwise the linux
##			os will schedule all threads on the same CPU/core -- leading to
##			lots of problems
worker_processes	auto;
#worker_cpu_affinity 0101 1010;

## awesome sauce: 
## http://forum.nginx.org/read.php?2,181676,181676#msg-181676
## ssl_engine aesni;

## do some research on ssl cache in the future 
## http://wiki.nginx.org/HttpSslModule
## ssl_session_cache shared:SSL:10m;

## http://www.cyberciti.biz/faq/linux-unix-nginx-too-many-open-files/
# set open fd limit to 30000
worker_rlimit_nofile 30000;

error_log	logs/nginx-error.log;
#error_log	logs/nginx-error.log	notice;
#error_log	logs/nginx-error.log	info;

pid	/var/run/nginx.pid;
#worker_rlimit_nofile 8192;

## PCRE JIT will actually hurt performance
#pcre_jit	on;
 
events {
	worker_connections  16384;  ## Default: 1024 -- this this high, worker_connections*worker_processes(auto=4) / 4 = max_clients

	# essential for linux, optmized to serve many clients with each thread
	use epoll;
	epoll_events 64;
	
	## multi_accept tries to accept() as many connections as possible after nginx gets notification about a new connection.
   multi_accept on;
   accept_mutex_delay 100ms;

#	debug_connection 208.74.187.162;
#	debug_connection 192.168.99.101;
	}


http {

	charset utf-8;
	charset_types text/xml text/plain text/vnd.wap.wml application/x-javascript application/rss+xml text/css;

	## these settings will be globally inherited.
	proxy_set_header Host $host;
	proxy_set_header X-Real-IP $remote_addr;
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	proxy_set_header X-SSL-Cipher	$ssl_cipher;
	proxy_set_header X-SSL-Protocol	$ssl_protocol;
	proxy_set_header X-SSL-Session-Id	$ssl_session_id;
	proxy_http_version 1.1;
	proxy_set_header Connection "";
	proxy_redirect off;			# not needed, should be a little faster
	proxy_temp_path  	/tmp;
	proxy_buffering	on;

	## these are default values (just for reference)
	## proxy_send_timeout	60s;
	proxy_connect_timeout 10s;		## default 60s;

	## serverfault.com/questions/51320/setting-up-nginx-to-not-retry-on-rails-timeouts
	proxy_read_timeout 60s;
	# proxy_next_upstream timeout error off;
	proxy_next_upstream 	timeout error http_502 http_504;

	## NOTE: THESE SETTINGS WILL BREAK DEV (AND FILE UPLOADS)
	## Start: Size Limits & Buffer Overflows ##
	client_body_buffer_size  16K;
	## NOTE: amazon checkout in particular sends *VERY* large headers, so these values need to be very large.
	client_header_buffer_size 4k;
	## increase this if we're getting 413 'request entity too large' messages
	client_max_body_size 128k;
	large_client_header_buffers 4 4k;
	## END: Size Limits & Buffer Overflows ##

	## Start: Timeouts ##
	client_body_timeout   10; 	# http://nginxvslighttpd.com/2011/06/nginx-client_body_timeout/
	client_header_timeout 10;  # http://nginxvslighttpd.com/2011/06/nginx-client_header_timeout/
	keepalive_timeout     60 10; # 
	send_timeout          10;
	## End: Timeouts ##

	reset_timedout_connection on;

	## check /usr/local/nginx/zoovy.conf 
	## NOTE: http://wiki.nginx.org/HttpProxyModule

	include			 mime.types;
	default_type	application/octet-stream;

	log_format timing '$remote_addr - $remote_user [$time_local]  $request '
  'upstream_response_time $upstream_response_time '
  'msec $msec request_time $request_time';

	log_format	main	'$remote_addr - $remote_user [$time_local] $request '
										'"$status" $body_bytes_sent "$http_referer" '
										'"$http_user_agent" "$http_x_forwarded_for"'
										'"$upstream_addr" "$upstream_status:$upstream_response_time"';

	sendfile			 	on;
	tcp_nopush		 	off;

	server_names_hash_max_size 1024;
	server_names_hash_bucket_size	 128;

	## vhosts
	## include "commercerack.conf";

	#include vhosts/*.conf;
	#include "test.conf";

	ssl_session_cache   shared:SSL:50m;
	ssl_session_timeout 10m;
	uwsgi_cache_path  /local/uwsgi-cache/ levels=2 keys_zone=media:128m max_size=8192m inactive=1200m;

	perl_modules perl;
	perl_require CommerceRackNginxHandlers.pm;

	perl_set $DATETIME CommerceRackNginxHandlers::var_datetime;
	perl_set $USERNAME CommerceRackNginxHandlers::var_username;
	perl_set $HOSTTYPE CommerceRackNginxHandlers::var_hosttype;
	perl_set $TARGETPATH CommerceRackNginxHandlers::var_targetpath;

	##
	##  upstreams
	##
	upstream our_memcached {
		server 127.0.0.1:4000;
		## keepalive 512; # this requires the ngx_http_upstream_keepalive module
		}

	##
	## legacy vstore support
	upstream upstream-vstore-uwsgi { 
		server unix:///var/run/uwsgi-vstore.sock;
		}

	##
	## ZID webapi support
	upstream upstream-webapi-uwsgi { 
		server unix:///var/run/uwsgi-webapi.sock;
		}

	##
	## formerly called "static"
	## used to serve images, etc.
	upstream upstream-media-uwsgi { 
		server unix:///var/run/uwsgi-media.sock;
		}

	##
	## 
	upstream upstream-jsonapi-uwsgi { 
		## /var/run/uwsgi-jsonapi.sock
		server unix:///var/run/uwsgi-jsonapi.sock;
		}

	upstream upstream-jsonapi-ws-uwsgi { 
		## /var/run/uwsgi-jsonapi-ws.sock
		## server unix:///var/run/uwsgi-jsonapi-ws.sock;
		server 127.0.0.1:9000;
		}

	## 
	## apptimizer speeds up app delivery, but at the expense of debuggability
	upstream upstream-apptimizer-uwsgi {
		server unix:///var/run/uwsgi-apptimizer.sock;
		}
	
	## 

	server {
		listen 80;
		listen 443 ssl spdy;
		listen 9000 ssl spdy;
		server_name _;
		server_name *.app-hosted.com;

		ssl_certificate         /usr/local/nginx/certs/any.app-hosted.com/any.app-hosted.com.crt;
		ssl_certificate_key     /usr/local/nginx/certs/any.app-hosted.com/any.app-hosted.com.key;
		keepalive_timeout        70;
		ssl_protocols   TLSv1.2 TLSv1.1 TLSv1 SSLv3;
		ssl_ciphers     ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
		ssl_prefer_server_ciphers       on;

		gzip on;
		gzip_disable "MSIE [1-6]\.(?!.*SV1)";
		gzip_min_length  1000;
		gzip_vary on;
		gzip_http_version 1.1;
		gzip_proxied any;
		gzip_types	text/javascript text/css text/xml application/x-javascript application/javascript application/json;
	
		proxy_buffering off;	
		proxy_set_header HOST $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Server-Port $server_port;
		proxy_set_header X-SSL-Cipher $ssl_cipher;
		proxy_set_header X-SSL-Protocol $ssl_protocol;
		proxy_set_header X-SSL-Session-Id $ssl_session_id;

		#location / {
		#	proxy_pass	http://unix:/var/run/nginx-loopback.sock;
		#	}

		include "commercerack-locations.conf";
		}

	## this needs to be beneath .app-hosted.com
	include "/usr/local/nginx/conf/vhosts/*.conf";

	}
